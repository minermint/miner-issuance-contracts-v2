{
  "address": "0x0C15BAe399374f9eE1Fb0243780D533704C0feBc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reserveAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Issued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "calculateETHPerMiner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateETHToMiner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateMinerToETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "changePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedOracleAddress",
          "type": "address"
        }
      ],
      "name": "changePriceFeedOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserveAddress",
          "type": "address"
        }
      ],
      "name": "changeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "exactMinerOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "issueExactMinerForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exactMinerOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "issueExactMinerForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minMinerOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "issueMinerForExactETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minMinerOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "issueMinerForExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe777d4ed180aab324b5772cec1a98094f85e577ae61fc4715bb067fdd4ee4209",
  "receipt": {
    "to": null,
    "from": "0x119eC8C4200dFafB4E40e73f976b8C874BFf9752",
    "contractAddress": "0x0C15BAe399374f9eE1Fb0243780D533704C0feBc",
    "transactionIndex": 15,
    "gasUsed": "2041926",
    "logsBloom": "0x
    "blockHash": "0x6211b1897b8384419830df5d27f23f6eb34d875f1f0e5ae1f431a8dbe97ce8c5",
    "transactionHash": "0xe777d4ed180aab324b5772cec1a98094f85e577ae61fc4715bb067fdd4ee4209",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 7709916,
        "transactionHash": "0xe777d4ed180aab324b5772cec1a98094f85e577ae61fc4715bb067fdd4ee4209",
        "address": "0xe65B6F2B1AA9aF3d119d2D8b41AD6Fa9A42D26c5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000c15bae399374f9ee1fb0243780d533704c0febc"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x6211b1897b8384419830df5d27f23f6eb34d875f1f0e5ae1f431a8dbe97ce8c5"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 7709916,
        "transactionHash": "0xe777d4ed180aab324b5772cec1a98094f85e577ae61fc4715bb067fdd4ee4209",
        "address": "0x0C15BAe399374f9eE1Fb0243780D533704C0feBc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000119ec8c4200dfafb4e40e73f976b8c874bff9752"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x6211b1897b8384419830df5d27f23f6eb34d875f1f0e5ae1f431a8dbe97ce8c5"
      }
    ],
    "blockNumber": 7709916,
    "cumulativeGasUsed": "3166162",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEEE8B4522617FE2f992351CB7C34568A77042d1d",
    "0x66c614210349b93F56569825e72A71071d3d7d68",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "numDeployments": 1,
  "solcInputHash": "aa03e8f8f16fa281bfddf082cb0d0416",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"calculateETHPerMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateETHToMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateMinerToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"changePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedOracleAddress\",\"type\":\"address\"}],\"name\":\"changePriceFeedOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserveAddress\",\"type\":\"address\"}],\"name\":\"changeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exactMinerOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"issueExactMinerForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactMinerOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"issueExactMinerForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minMinerOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"issueMinerForExactETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMinerOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"issueMinerForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateETHPerMiner()\":{\"returns\":{\"_0\":\"uint256 The price off a single Miner token in Ether.\"}},\"calculateETHToMiner(uint256)\":{\"details\":\"The amount of Ether must be in Wei, x ether * 10^18 (18 dp).\",\"params\":{\"amount\":\"uint256 The amount of Ether to swap.\"},\"returns\":{\"_0\":\"uint256 The amount of Miner tokens received for the specified Ether amount.\"}},\"changePair(address)\":{\"params\":{\"pairAddress\":\"address The USD Miner pair address.\"}},\"changePriceFeedOracle(address)\":{\"params\":{\"priceFeedOracleAddress\":\"address The Price Feed contract.\"}},\"changeReserve(address)\":{\"params\":{\"reserveAddress\":\"address The Reserve contract.\"}},\"constructor\":{\"params\":{\"pairAddress\":\"address The USD Miner pair.\",\"reserveAddress\":\"address The MinerReserve contract.\",\"uniswapRouterAddress\":\"address The Uniswap Router contract.\"}},\"issueExactMinerForETH(uint256,uint256)\":{\"params\":{\"deadline\":\"uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.\",\"exactMinerOut\":\"uint256 The exact amount of Miner token to receive. Reverts if the minimum is not met.\"},\"returns\":{\"_0\":\"uint256 The amount of Miner token swapped.\"}},\"issueExactMinerForTokens(address[],uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.\",\"exactMinerOut\":\"uint256 The exact amount of Miner token to receive.\",\"maxAmountIn\":\"uint256 The maximum amount of tokens to swap for Miner. Reverts if the minimum is not met.\",\"path\":\"address[] The optimal path to take when swapping a token for ETH. Must be a valid ERC20-compatible token and the final token must be WETH.\"},\"returns\":{\"_0\":\"uint256 The amount of Miner token swapped.\"}},\"issueMinerForExactETH(uint256,uint256)\":{\"params\":{\"deadline\":\"uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.\",\"minMinerOut\":\"uint256 The minimum amount of Miner token to receive. Reverts if the minimum is not met.\"},\"returns\":{\"_0\":\"uint256 The amount of Miner token swapped.\"}},\"issueMinerForExactTokens(address[],uint256,uint256,uint256)\":{\"params\":{\"amount\":\"uint256 The amount of token to swap for Miner.\",\"deadline\":\"uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.\",\"minMinerOut\":\"uint256 The minimum amount of Miner token to receive. Reverts if the minimum is not met.\",\"path\":\"address[] The optimal path to take when swapping a token for ETH. Must be a valid ERC20-compatible token and the final token must be WETH.\"},\"returns\":{\"_0\":\"uint256 The amount of Miner token swapped.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}},\"title\":\"Issue Miner for Ether and other ERC20 tokens.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateETHPerMiner()\":{\"notice\":\"Calculates the price of a single Miner token in Ether. The amount will be returned in Wei, x ether * 10^18 (18 dp).\"},\"calculateETHToMiner(uint256)\":{\"notice\":\"Calculate how much miner will be received for `amount` ETH.\"},\"changePair(address)\":{\"notice\":\"Sets the USD to Miner pair address.\"},\"changePriceFeedOracle(address)\":{\"notice\":\"Changes the Price Feed contract. This will be a valid Chainlink contract. A list of contracts is available at https://docs.chain.link/docs/ethereum-addresses/.\"},\"changeReserve(address)\":{\"notice\":\"Sets the Reserve contract.\"},\"constructor\":{\"notice\":\"Initializes the MinerIssuance contract.\"},\"issueExactMinerForETH(uint256,uint256)\":{\"notice\":\"Issue exactly `exactMinerOut` Miner for no more than `maxETHIn` ETH. Any additional ether will be refunded back to the user.\"},\"issueExactMinerForTokens(address[],uint256,uint256,uint256)\":{\"notice\":\"Issue exactly `exactMinerOut` Miner for no more than `maxAmountIn` of the selected token. dev Emits a SwappedTokenToMiner event if successful.\"},\"issueMinerForExactETH(uint256,uint256)\":{\"notice\":\"Issue at least `minMinerOut` Miner for an exact amount of ETH.\"},\"issueMinerForExactTokens(address[],uint256,uint256,uint256)\":{\"notice\":\"Issue at least `minMinerOut` Miner for exactly `amount` of `token` tokens. dev Emits a SwappedTokenToMiner event if successful.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MinerIssuance.sol\":\"MinerIssuance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/PullPayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/PullPayment.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\",\"keccak256\":\"0xbb286f865aa7ae537a147695baf219277a823e06f6d2008e9d2aaa6f6686aa95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/escrow/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/Escrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\",\"keccak256\":\"0x10a40dfab727e06bb3472d1bc9ccf145a604b0c9889d5c7a2eff64d72348eb21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/IUSDMinerPair.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.2 <0.9.0;\\n\\ninterface IUSDMinerPair {\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d0ead12f5e904ae0d5dff5200b6c6bbe7021360fa7953a344121ffc2975d1fb\",\"license\":\"GPL-3.0\"},\"contracts/MinerIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/PullPayment.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"./MinerReserve.sol\\\";\\nimport \\\"./IUSDMinerPair.sol\\\";\\n\\n/// @title Issue Miner for Ether and other ERC20 tokens.\\ncontract MinerIssuance is PullPayment, Ownable, ReentrancyGuard {\\n    address public priceFeedOracle;\\n\\n    address public pair;\\n\\n    address public reserve;\\n\\n    address public uniswapRouter;\\n\\n    /**\\n     * Initializes the MinerIssuance contract.\\n     * @param pairAddress address The USD Miner pair.\\n     * @param reserveAddress address The MinerReserve contract.\\n     * @param uniswapRouterAddress address The Uniswap Router contract.\\n     */\\n    constructor(\\n        address pairAddress,\\n        address reserveAddress,\\n        address uniswapRouterAddress\\n    ) {\\n        _changePair(pairAddress);\\n        _changeReserve(reserveAddress);\\n        _changeUniswapRouterAddress(uniswapRouterAddress);\\n    }\\n\\n    /**\\n     * Sets the USD to Miner pair address.\\n     * @param pairAddress address The USD Miner pair address.\\n     */\\n    function changePair(address pairAddress) public onlyOwner {\\n        _changePair(pairAddress);\\n    }\\n\\n    /**\\n     * Sets the Reserve contract.\\n     * @param reserveAddress address The Reserve contract.\\n     */\\n    function changeReserve(address reserveAddress) public onlyOwner {\\n        _changeReserve(reserveAddress);\\n    }\\n\\n    /**\\n     * Changes the Price Feed contract. This will be a valid Chainlink contract. A list of contracts is available at https://docs.chain.link/docs/ethereum-addresses/.\\n     * @param priceFeedOracleAddress address The Price Feed contract.\\n     */\\n    function changePriceFeedOracle(address priceFeedOracleAddress)\\n        public\\n        onlyOwner\\n    {\\n        priceFeedOracle = priceFeedOracleAddress;\\n    }\\n\\n    function _changePair(address pairAddress) private {\\n        pair = pairAddress;\\n    }\\n\\n    function _changeReserve(address reserveAddress) private {\\n        reserve = reserveAddress;\\n    }\\n\\n    function _changeUniswapRouterAddress(address uniswapRouterAddress) private {\\n        uniswapRouter = uniswapRouterAddress;\\n    }\\n\\n    /**\\n     * Calculates the price of a single Miner token in Ether. The amount will be returned in Wei, x ether * 10^18 (18 dp).\\n     * @return uint256 The price off a single Miner token in Ether.\\n     */\\n    function calculateETHPerMiner() external view returns (uint256) {\\n        return _calculateETHPerMiner();\\n    }\\n\\n    function _calculateETHPerMiner() internal view returns (uint256) {\\n        require(priceFeedOracle != address(0), \\\"MinerIssuance/no-oracle-set\\\");\\n\\n        uint256 usdPerMiner = IUSDMinerPair(pair).getPrice();\\n\\n        (, int256 usdPerETH, , , ) = AggregatorV3Interface(priceFeedOracle)\\n            .latestRoundData();\\n\\n        // latest per miner price * by 18 dp, divide by latest price per eth.\\n        // the result will be the price of 1 miner in wei.\\n        return (usdPerMiner * 1e18) / uint256(usdPerETH);\\n    }\\n\\n    /**\\n     * Calculate how much miner will be received for `amount` ETH.\\n     * @dev The amount of Ether must be in Wei, x ether * 10^18 (18 dp).\\n     * @param amount uint256 The amount of Ether to swap.\\n     * @return uint256 The amount of Miner tokens received for the specified Ether amount.\\n     */\\n    function calculateETHToMiner(uint256 amount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calculateETHToMiner(amount);\\n    }\\n\\n    function _calculateETHToMiner(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPerMinerRate = _calculateETHPerMiner();\\n\\n        // multiply sent eth by 10^18 so that it transfers the correct amount of\\n        // miner.\\n        return (amount * 1e18) / ethPerMinerRate;\\n    }\\n\\n    function calculateMinerToETH(uint256 amount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calculateMinerToETH(amount);\\n    }\\n\\n    function _calculateMinerToETH(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPerMinerRate = _calculateETHPerMiner();\\n\\n        // x Miner / 1 Miner To ETH Exchange Rate = y ETH\\n        return (amount * ethPerMinerRate) / 1e18;\\n    }\\n\\n    /**\\n     * Issue at least `minMinerOut` Miner for an exact amount of ETH.\\n     * @param minMinerOut uint256 The minimum amount of Miner token to receive.\\n     * Reverts if the minimum is not met.\\n     * @param deadline uint256 A timestamp indicating how long the swap will\\n     * stay active. Reverts if expired.\\n     * @return uint256 The amount of Miner token swapped.\\n     */\\n    function issueMinerForExactETH(uint256 minMinerOut, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        require(deadline >= block.timestamp, \\\"MinerIssuance/deadline-expired\\\");\\n\\n        uint256 ethIn = msg.value;\\n\\n        require(ethIn > 0, \\\"MinerIssuance/deposit-invalid\\\");\\n\\n        uint256 minerOut = _calculateETHToMiner(ethIn);\\n\\n        require(\\n            minerOut >= minMinerOut,\\n            \\\"MinerIssuance/insufficient-amount-out\\\"\\n        );\\n\\n        _asyncTransfer(owner(), ethIn);\\n\\n        MinerReserve(reserve).issue(_msgSender(), minerOut);\\n\\n        emit Issued(_msgSender(), reserve, ethIn, minerOut);\\n\\n        return minerOut;\\n    }\\n\\n    /**\\n     * Issue exactly `exactMinerOut` Miner for no more than `maxETHIn` ETH. Any\\n     * additional ether will be refunded back to the user.\\n     *\\n     * @param exactMinerOut uint256 The exact amount of Miner token to receive.\\n     * Reverts if the minimum is not met.\\n     * @param deadline uint256 A timestamp indicating how long the swap will\\n     * stay active. Reverts if expired.\\n     * @return uint256 The amount of Miner token swapped.\\n     */\\n    function issueExactMinerForETH(uint256 exactMinerOut, uint256 deadline)\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(deadline >= block.timestamp, \\\"MinerIssuance/deadline-expired\\\");\\n\\n        uint256 ethIn = msg.value;\\n\\n        require(ethIn > 0, \\\"MinerIssuance/deposit-invalid\\\");\\n\\n        uint256 requiredETHIn = _calculateMinerToETH(exactMinerOut);\\n\\n        require(requiredETHIn <= ethIn, \\\"MinerIssuance/excessive-amount-in\\\");\\n\\n        _asyncTransfer(owner(), requiredETHIn);\\n\\n        // refund excess ETH.\\n        if (ethIn >= requiredETHIn) {\\n            (bool success, ) = address(msg.sender).call{\\n                value: ethIn - requiredETHIn\\n            }(new bytes(0));\\n\\n            require(success, \\\"MinerIssuance/cannot-refund-ether\\\");\\n        }\\n\\n        MinerReserve(reserve).issue(_msgSender(), exactMinerOut);\\n\\n        emit Issued(_msgSender(), reserve, requiredETHIn, exactMinerOut);\\n\\n        return exactMinerOut;\\n    }\\n\\n    /**\\n     * Issue at least `minMinerOut` Miner for exactly `amount` of `token`\\n     * tokens.\\n     * @ dev Emits a SwappedTokenToMiner event if successful.\\n     * @param path address[] The optimal path to take when swapping a token for\\n     * ETH. Must be a valid ERC20-compatible token and the final token must be\\n     * WETH.\\n     * @param amount uint256 The amount of token to swap for Miner.\\n     * @param minMinerOut uint256 The minimum amount of Miner token to receive. Reverts if the minimum is not met.\\n     * @param deadline uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.\\n     * @return uint256 The amount of Miner token swapped.\\n     */\\n    function issueMinerForExactTokens(\\n        address[] calldata path, // No checks. Let uniswap validate the path.\\n        uint256 amount,\\n        uint256 minMinerOut,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IUniswapV2Router02 router = IUniswapV2Router02(uniswapRouter);\\n\\n        // if the path is invalid, it should fail here.\\n        uint256 expectedETHOut = router.getAmountsOut(amount, path)[\\n            path.length - 1\\n        ];\\n\\n        uint256 expectedMinerOut = _calculateETHToMiner(expectedETHOut);\\n\\n        require(\\n            expectedMinerOut >= minMinerOut,\\n            \\\"MinerIssuance/insufficient-amount-out\\\"\\n        );\\n\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        TransferHelper.safeApprove(path[0], uniswapRouter, amount);\\n\\n        uint256 balanceBefore = payments(owner());\\n\\n        uint256[] memory amounts = router.swapExactTokensForETH(\\n            amount,\\n            expectedETHOut,\\n            path,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balanceAfter = payments(owner());\\n\\n        require(\\n            balanceAfter == balanceBefore + amounts[amounts.length - 1],\\n            \\\"MinerIssuance/invalid-eth-amount-transferred\\\"\\n        );\\n\\n        // the amount of eth received from the swap may be more than the min.\\n        // So, recheck actual miner to issue.\\n        uint256 actualMinerOut = _calculateETHToMiner(\\n            amounts[amounts.length - 1]\\n        );\\n\\n        MinerReserve(reserve).issue(_msgSender(), actualMinerOut);\\n\\n        emit Issued(_msgSender(), reserve, amount, actualMinerOut);\\n\\n        return actualMinerOut;\\n    }\\n\\n    /**\\n     * Issue exactly `exactMinerOut` Miner for no more than `maxAmountIn` of\\n     * the selected token.\\n     * @ dev Emits a SwappedTokenToMiner event if successful.\\n     * @param path address[] The optimal path to take when swapping a token for\\n     * ETH. Must be a valid ERC20-compatible token and the final token must be\\n     * WETH.\\n     * @param maxAmountIn uint256 The maximum amount of tokens to swap for\\n     * Miner. Reverts if the minimum is not met.\\n     * @param exactMinerOut uint256 The exact amount of Miner token to receive.\\n     * @param deadline uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.\\n     * @return uint256 The amount of Miner token swapped.\\n     */\\n    function issueExactMinerForTokens(\\n        address[] calldata path,\\n        uint256 maxAmountIn,\\n        uint256 exactMinerOut,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IUniswapV2Router02 router = IUniswapV2Router02(uniswapRouter);\\n\\n        uint256 requiredETHIn = _calculateMinerToETH(exactMinerOut);\\n        uint256 requiredTokensIn = router.getAmountsIn(requiredETHIn, path)[0];\\n\\n        require(\\n            requiredTokensIn <= maxAmountIn,\\n            \\\"MinerIssuance/excessive-amount-in\\\"\\n        );\\n\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            address(this),\\n            requiredTokensIn\\n        );\\n\\n        TransferHelper.safeApprove(path[0], uniswapRouter, requiredTokensIn);\\n\\n        uint256 balanceBefore = payments(owner());\\n\\n        uint256[] memory amounts = router.swapTokensForExactETH(\\n            requiredETHIn,\\n            requiredTokensIn,\\n            path,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balanceAfter = payments(owner());\\n\\n        require(\\n            balanceAfter == balanceBefore + amounts[amounts.length - 1],\\n            \\\"MinerIssuance/invalid-eth-amount-transferred\\\"\\n        );\\n\\n        MinerReserve(reserve).issue(_msgSender(), exactMinerOut);\\n\\n        emit Issued(_msgSender(), reserve, requiredTokensIn, exactMinerOut);\\n\\n        return exactMinerOut;\\n    }\\n\\n    receive() external payable {\\n        _asyncTransfer(owner(), msg.value);\\n    }\\n\\n    event Issued(\\n        address indexed recipient,\\n        address indexed sender,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n}\\n\",\"keccak256\":\"0xec8c646347df615fc3809eca7221209fe51dfbbb414c12f0f08bcbe58eb4e6f3\",\"license\":\"GPL-3.0\"},\"contracts/MinerReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract MinerReserve is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    address private _token;\\n\\n    bytes32 public constant ISSUER_ROLE = keccak256(\\\"ISSUER_ROLE\\\");\\n\\n    constructor(address token) {\\n        _token = token;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(ISSUER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * Issue miner tokens on a user's behalf.\\n     * @param recipient address The address of the token recipient.\\n     * @param amount uint256 The amount of Miner tokens to purchase.\\n     */\\n    function issue(address recipient, uint256 amount)\\n        external\\n        onlyRole(ISSUER_ROLE)\\n    {\\n        require(amount > 0, \\\"MinerReserve/amount-invalid\\\");\\n        require(\\n            IERC20(_token).balanceOf(address(this)) >= amount,\\n            \\\"MinerReserve/balance-exceeded\\\"\\n        );\\n\\n        IERC20(_token).safeTransfer(recipient, amount);\\n\\n        emit Issued(recipient, amount);\\n    }\\n\\n    event Issued(address indexed recipient, uint256 amount);\\n}\\n\",\"keccak256\":\"0xc4bfbad6d9d04e3cf857bf6b10db1373144bc5c77e0b3db2d383c0eebd061103\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200230c3803806200230c833981016040819052620000349162000150565b604051620000429062000125565b604051809103906000f0801580156200005f573d6000803e3d6000fd5b506001600160a01b03166080526200007733620000d5565b60018055600380546001600160a01b0319166001600160a01b038516179055600480546001600160a01b0319166001600160a01b038416179055600580546001600160a01b0319166001600160a01b0383161790555050506200019a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105f28062001d1a83390190565b80516001600160a01b03811681146200014b57600080fd5b919050565b6000806000606084860312156200016657600080fd5b620001718462000133565b9250620001816020850162000133565b9150620001916040850162000133565b90509250925092565b608051611b56620001c4600039600081816103b701528181610bd90152610d8b0152611b566000f3fe6080604052600436106101185760003560e01c8063735de9f7116100a0578063ca58da1a11610064578063ca58da1a146102f8578063cd3293de14610318578063e2982c2114610338578063e47148f014610358578063f2fde38b1461037857600080fd5b8063735de9f7146102425780638da5cb5b1461027a578063a8aa1b3114610298578063ad15e477146102b8578063b9ab9927146102d857600080fd5b806331b3eb94116100e757806331b3eb94146101ad5780635895a506146101cd578063630acb52146101ed5780636bc8af841461020d578063715018a61461022d57600080fd5b80630c5b3f6f1461013f57806316c0d9e214610167578063178dfdc71461017a57806317fd5c051461019a57600080fd5b3661013a576101386101326000546001600160a01b031690565b34610398565b005b600080fd5b34801561014b57600080fd5b50610154610419565b6040519081526020015b60405180910390f35b610154610175366004611602565b610428565b34801561018657600080fd5b50610154610195366004611624565b6105c7565b6101546101a8366004611602565b6108f8565b3480156101b957600080fd5b506101386101c83660046116c4565b610bba565b3480156101d957600080fd5b506101546101e83660046116e1565b610c38565b3480156101f957600080fd5b506101546102083660046116e1565b610c49565b34801561021957600080fd5b506101386102283660046116c4565b610c54565b34801561023957600080fd5b50610138610c9f565b34801561024e57600080fd5b50600554610262906001600160a01b031681565b6040516001600160a01b03909116815260200161015e565b34801561028657600080fd5b506000546001600160a01b0316610262565b3480156102a457600080fd5b50600354610262906001600160a01b031681565b3480156102c457600080fd5b506101386102d33660046116c4565b610cd5565b3480156102e457600080fd5b50600254610262906001600160a01b031681565b34801561030457600080fd5b506101386103133660046116c4565b610d21565b34801561032457600080fd5b50600454610262906001600160a01b031681565b34801561034457600080fd5b506101546103533660046116c4565b610d69565b34801561036457600080fd5b50610154610373366004611624565b610df8565b34801561038457600080fd5b506101386103933660046116c4565b6110f3565b60405163f340fa0160e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f340fa019083906024016000604051808303818588803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b50505050505050565b600061042361118b565b905090565b60004282101561047f5760405162461bcd60e51b815260206004820152601e60248201527f4d696e657249737375616e63652f646561646c696e652d65787069726564000060448201526064015b60405180910390fd5b34806104cd5760405162461bcd60e51b815260206004820152601d60248201527f4d696e657249737375616e63652f6465706f7369742d696e76616c69640000006044820152606401610476565b60006104d8826112fb565b9050848110156104fa5760405162461bcd60e51b8152600401610476906116fa565b61051561050f6000546001600160a01b031690565b83610398565b6004546001600160a01b031663867904b4336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561056f57600080fd5b505af1158015610583573d6000803e3d6000fd5b505060045460408051868152602081018690526001600160a01b039092169350339250600080516020611b01833981519152910160405180910390a3949350505050565b60055460405163d06ca61f60e01b81526000916001600160a01b0316908290829063d06ca61f906106009089908c908c90600401611788565b600060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261064591908101906117c1565b610650600189611895565b81518110610660576106606118ac565b602002602001015190506000610675826112fb565b9050858110156106975760405162461bcd60e51b8152600401610476906116fa565b6106ca898960008181106106ad576106ad6118ac565b90506020020160208101906106c291906116c4565b33308a61132c565b610707898960008181106106e0576106e06118ac565b90506020020160208101906106f591906116c4565b6005546001600160a01b03168961146a565b600061071e6103536000546001600160a01b031690565b90506000846001600160a01b03166318cbafe58a868e8e308d6040518763ffffffff1660e01b8152600401610758969594939291906118c2565b6000604051808303816000875af1158015610777573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261079f91908101906117c1565b905060006107b86103536000546001600160a01b031690565b905081600183516107c99190611895565b815181106107d9576107d96118ac565b6020026020010151836107ec9190611900565b811461080a5760405162461bcd60e51b815260040161047690611918565b600061083b836001855161081e9190611895565b8151811061082e5761082e6118ac565b60200260200101516112fb565b6004549091506001600160a01b031663867904b4336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b5050600454604080518f8152602081018690526001600160a01b039092169350339250600080516020611b01833981519152910160405180910390a39c9b505050505050505050505050565b600060026001540361094c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610476565b6002600155428210156109a15760405162461bcd60e51b815260206004820152601e60248201527f4d696e657249737375616e63652f646561646c696e652d6578706972656400006044820152606401610476565b34806109ef5760405162461bcd60e51b815260206004820152601d60248201527f4d696e657249737375616e63652f6465706f7369742d696e76616c69640000006044820152606401610476565b60006109fa85611592565b905081811115610a1c5760405162461bcd60e51b815260040161047690611964565b610a37610a316000546001600160a01b031690565b82610398565b808210610b0357600033610a4b8385611895565b60408051600081526020810191829052610a64916119a5565b60006040518083038185875af1925050503d8060008114610aa1576040519150601f19603f3d011682016040523d82523d6000602084013e610aa6565b606091505b5050905080610b015760405162461bcd60e51b815260206004820152602160248201527f4d696e657249737375616e63652f63616e6e6f742d726566756e642d657468656044820152603960f91b6064820152608401610476565b505b6004546001600160a01b031663867904b4336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101889052604401600060405180830381600087803b158015610b5d57600080fd5b505af1158015610b71573d6000803e3d6000fd5b505060045460408051858152602081018a90526001600160a01b039092169350339250600080516020611b01833981519152910160405180910390a35050600180555090919050565b6040516351cff8d960e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906351cff8d990602401600060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b5050505050565b6000610c4382611592565b92915050565b6000610c43826112fb565b6000546001600160a01b03163314610c7e5760405162461bcd60e51b8152600401610476906119e0565b600380546001600160a01b0319166001600160a01b03831617905550565b50565b6000546001600160a01b03163314610cc95760405162461bcd60e51b8152600401610476906119e0565b610cd360006115b2565b565b6000546001600160a01b03163314610cff5760405162461bcd60e51b8152600401610476906119e0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d4b5760405162461bcd60e51b8152600401610476906119e0565b600480546001600160a01b0319166001600160a01b03831617905550565b6040516371d4ed8d60e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a9db1a90602401602060405180830381865afa158015610dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190611a15565b6005546000906001600160a01b031681610e1185611592565b90506000826001600160a01b0316631f00ca74838b8b6040518463ffffffff1660e01b8152600401610e4593929190611788565b600060405180830381865afa158015610e62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8a91908101906117c1565b600081518110610e9c57610e9c6118ac565b6020026020010151905086811115610ec65760405162461bcd60e51b815260040161047690611964565b610ef989896000818110610edc57610edc6118ac565b9050602002016020810190610ef191906116c4565b33308461132c565b610f3689896000818110610f0f57610f0f6118ac565b9050602002016020810190610f2491906116c4565b6005546001600160a01b03168361146a565b6000610f4d6103536000546001600160a01b031690565b90506000846001600160a01b0316634a25d94a85858e8e308d6040518763ffffffff1660e01b8152600401610f87969594939291906118c2565b6000604051808303816000875af1158015610fa6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fce91908101906117c1565b90506000610fe76103536000546001600160a01b031690565b90508160018351610ff89190611895565b81518110611008576110086118ac565b60200260200101518361101b9190611900565b81146110395760405162461bcd60e51b815260040161047690611918565b6004546001600160a01b031663867904b4336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018c9052604401600060405180830381600087803b15801561109357600080fd5b505af11580156110a7573d6000803e3d6000fd5b505060045460408051888152602081018e90526001600160a01b039092169350339250600080516020611b01833981519152910160405180910390a350969a9950505050505050505050565b6000546001600160a01b0316331461111d5760405162461bcd60e51b8152600401610476906119e0565b6001600160a01b0381166111825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610476565b610c9c816115b2565b6002546000906001600160a01b03166111e65760405162461bcd60e51b815260206004820152601b60248201527f4d696e657249737375616e63652f6e6f2d6f7261636c652d73657400000000006044820152606401610476565b60035460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca9160048083019260209291908290030181865afa158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190611a15565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190611a4d565b5050509150508082670de0b6b3a76400006112ea9190611a9d565b6112f49190611abc565b9250505090565b60008061130661118b565b90508061131b84670de0b6b3a7640000611a9d565b6113259190611abc565b9392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161139091906119a5565b6000604051808303816000865af19150503d80600081146113cd576040519150601f19603f3d011682016040523d82523d6000602084013e6113d2565b606091505b50915091508180156113fc5750805115806113fc5750808060200190518101906113fc9190611ade565b6114625760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610476565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916114c691906119a5565b6000604051808303816000865af19150503d8060008114611503576040519150601f19603f3d011682016040523d82523d6000602084013e611508565b606091505b50915091508180156115325750805115806115325750808060200190518101906115329190611ade565b610c315760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b6064820152608401610476565b60008061159d61118b565b9050670de0b6b3a764000061131b8285611a9d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561161557600080fd5b50508035926020909101359150565b60008060008060006080868803121561163c57600080fd5b853567ffffffffffffffff8082111561165457600080fd5b818801915088601f83011261166857600080fd5b81358181111561167757600080fd5b8960208260051b850101111561168c57600080fd5b60209283019a909950918801359760408101359750606001359550909350505050565b6001600160a01b0381168114610c9c57600080fd5b6000602082840312156116d657600080fd5b8135611325816116af565b6000602082840312156116f357600080fd5b5035919050565b60208082526025908201527f4d696e657249737375616e63652f696e73756666696369656e742d616d6f756e6040820152641d0b5bdd5d60da1b606082015260800190565b8183526000602080850194508260005b8581101561177d578135611762816116af565b6001600160a01b03168752958201959082019060010161174f565b509495945050505050565b8381526040602082015260006117a260408301848661173f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156117d457600080fd5b825167ffffffffffffffff808211156117ec57600080fd5b818501915085601f83011261180057600080fd5b815181811115611812576118126117ab565b8060051b604051601f19603f83011681018181108582111715611837576118376117ab565b60405291825284820192508381018501918883111561185557600080fd5b938501935b828510156118735784518452938501939285019261185a565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156118a7576118a761187f565b500390565b634e487b7160e01b600052603260045260246000fd5b86815285602082015260a0604082015260006118e260a08301868861173f565b6001600160a01b039490941660608301525060800152949350505050565b600082198211156119135761191361187f565b500190565b6020808252602c908201527f4d696e657249737375616e63652f696e76616c69642d6574682d616d6f756e7460408201526b0b5d1c985b9cd9995c9c995960a21b606082015260800190565b60208082526021908201527f4d696e657249737375616e63652f6578636573736976652d616d6f756e742d696040820152603760f91b606082015260800190565b6000825160005b818110156119c657602081860181015185830152016119ac565b818111156119d5576000828501525b509190910192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611a2757600080fd5b5051919050565b805169ffffffffffffffffffff81168114611a4857600080fd5b919050565b600080600080600060a08688031215611a6557600080fd5b611a6e86611a2e565b9450602086015193506040860151925060608601519150611a9160808701611a2e565b90509295509295909350565b6000816000190483118215151615611ab757611ab761187f565b500290565b600082611ad957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611af057600080fd5b8151801515811461132557600080fdfefb523ef2d7d7cf3cca7bf64af41c5cce286257d61e3b23859742a3bbec9d5df8a264697066735822122090b2df5e0333b01b924cce3b08bc09c0ac73eafe32e417a90e3dc6936f5286d164736f6c634300080f0033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105748061007e6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100be578063f2fde38b14610102578063f340fa0114610122575b600080fd5b34801561006657600080fd5b5061007a6100753660046104bf565b610135565b005b34801561008857600080fd5b5061007a6101d7565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b3480156100ca57600080fd5b506100f46100d93660046104bf565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100b5565b34801561010e57600080fd5b5061007a61011d3660046104bf565b61020d565b61007a6101303660046104bf565b6102a8565b6000546001600160a01b031633146101685760405162461bcd60e51b815260040161015f906104e3565b60405180910390fd5b6001600160a01b0381166000818152600160205260408120805491905590610190908261033c565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101cb91815260200190565b60405180910390a25050565b6000546001600160a01b031633146102015760405162461bcd60e51b815260040161015f906104e3565b61020b600061045a565b565b6000546001600160a01b031633146102375760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b03811661029c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161015f565b6102a58161045a565b50565b6000546001600160a01b031633146102d25760405162461bcd60e51b815260040161015f906104e3565b6001600160a01b0381166000908152600160205260408120805434928392916102fc908490610518565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101cb565b8047101561038c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161015f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146103d9576040519150601f19603f3d011682016040523d82523d6000602084013e6103de565b606091505b50509050806104555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161015f565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102a557600080fd5b6000602082840312156104d157600080fd5b81356104dc816104aa565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561053957634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a9ab8ac81dfa472e64ecaca0aac01c633b160f5f5e41d7a77f886f6a91acfd1664736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateETHPerMiner()": {
        "returns": {
          "_0": "uint256 The price off a single Miner token in Ether."
        }
      },
      "calculateETHToMiner(uint256)": {
        "details": "The amount of Ether must be in Wei, x ether * 10^18 (18 dp).",
        "params": {
          "amount": "uint256 The amount of Ether to swap."
        },
        "returns": {
          "_0": "uint256 The amount of Miner tokens received for the specified Ether amount."
        }
      },
      "changePair(address)": {
        "params": {
          "pairAddress": "address The USD Miner pair address."
        }
      },
      "changePriceFeedOracle(address)": {
        "params": {
          "priceFeedOracleAddress": "address The Price Feed contract."
        }
      },
      "changeReserve(address)": {
        "params": {
          "reserveAddress": "address The Reserve contract."
        }
      },
      "constructor": {
        "params": {
          "pairAddress": "address The USD Miner pair.",
          "reserveAddress": "address The MinerReserve contract.",
          "uniswapRouterAddress": "address The Uniswap Router contract."
        }
      },
      "issueExactMinerForETH(uint256,uint256)": {
        "params": {
          "deadline": "uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.",
          "exactMinerOut": "uint256 The exact amount of Miner token to receive. Reverts if the minimum is not met."
        },
        "returns": {
          "_0": "uint256 The amount of Miner token swapped."
        }
      },
      "issueExactMinerForTokens(address[],uint256,uint256,uint256)": {
        "params": {
          "deadline": "uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.",
          "exactMinerOut": "uint256 The exact amount of Miner token to receive.",
          "maxAmountIn": "uint256 The maximum amount of tokens to swap for Miner. Reverts if the minimum is not met.",
          "path": "address[] The optimal path to take when swapping a token for ETH. Must be a valid ERC20-compatible token and the final token must be WETH."
        },
        "returns": {
          "_0": "uint256 The amount of Miner token swapped."
        }
      },
      "issueMinerForExactETH(uint256,uint256)": {
        "params": {
          "deadline": "uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.",
          "minMinerOut": "uint256 The minimum amount of Miner token to receive. Reverts if the minimum is not met."
        },
        "returns": {
          "_0": "uint256 The amount of Miner token swapped."
        }
      },
      "issueMinerForExactTokens(address[],uint256,uint256,uint256)": {
        "params": {
          "amount": "uint256 The amount of token to swap for Miner.",
          "deadline": "uint256 A timestamp indicating how long the swap will stay active. Reverts if expired.",
          "minMinerOut": "uint256 The minimum amount of Miner token to receive. Reverts if the minimum is not met.",
          "path": "address[] The optimal path to take when swapping a token for ETH. Must be a valid ERC20-compatible token and the final token must be WETH."
        },
        "returns": {
          "_0": "uint256 The amount of Miner token swapped."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      }
    },
    "title": "Issue Miner for Ether and other ERC20 tokens.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateETHPerMiner()": {
        "notice": "Calculates the price of a single Miner token in Ether. The amount will be returned in Wei, x ether * 10^18 (18 dp)."
      },
      "calculateETHToMiner(uint256)": {
        "notice": "Calculate how much miner will be received for `amount` ETH."
      },
      "changePair(address)": {
        "notice": "Sets the USD to Miner pair address."
      },
      "changePriceFeedOracle(address)": {
        "notice": "Changes the Price Feed contract. This will be a valid Chainlink contract. A list of contracts is available at https://docs.chain.link/docs/ethereum-addresses/."
      },
      "changeReserve(address)": {
        "notice": "Sets the Reserve contract."
      },
      "constructor": {
        "notice": "Initializes the MinerIssuance contract."
      },
      "issueExactMinerForETH(uint256,uint256)": {
        "notice": "Issue exactly `exactMinerOut` Miner for no more than `maxETHIn` ETH. Any additional ether will be refunded back to the user."
      },
      "issueExactMinerForTokens(address[],uint256,uint256,uint256)": {
        "notice": "Issue exactly `exactMinerOut` Miner for no more than `maxAmountIn` of the selected token. dev Emits a SwappedTokenToMiner event if successful."
      },
      "issueMinerForExactETH(uint256,uint256)": {
        "notice": "Issue at least `minMinerOut` Miner for an exact amount of ETH."
      },
      "issueMinerForExactTokens(address[],uint256,uint256,uint256)": {
        "notice": "Issue at least `minMinerOut` Miner for exactly `amount` of `token` tokens. dev Emits a SwappedTokenToMiner event if successful."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 446,
        "contract": "contracts/MinerIssuance.sol:MinerIssuance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 617,
        "contract": "contracts/MinerIssuance.sol:MinerIssuance",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2183,
        "contract": "contracts/MinerIssuance.sol:MinerIssuance",
        "label": "priceFeedOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2185,
        "contract": "contracts/MinerIssuance.sol:MinerIssuance",
        "label": "pair",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2187,
        "contract": "contracts/MinerIssuance.sol:MinerIssuance",
        "label": "reserve",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2189,
        "contract": "contracts/MinerIssuance.sol:MinerIssuance",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}